// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
	directUrl = env("DIRECT_URL")
}

enum UserRole {
	ADMIN
	USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
	password			String?
	role 			    UserRole @default(USER)
  accounts      Account[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Store { 
	id          String  @id @default(uuid())
	name				String
	userId			String
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	billboards 	Billboard[] @relation("StoreToBillboard")
	categories 	Category[] @relation("StoreToCategory")
	sizes				Size[] @relation("StoreToSize")
	products		Product[] @relation("StoreToProduct")
	orders			Order[] @relation("StoreToOrder")
}

model Billboard { 
	id					String  @id @default(uuid())
	label 			String
	imageUrl 		String
	createdAt 	DateTime @default(now())
	updatedAt 	DateTime @updatedAt

	store				Store @relation("StoreToBillboard", fields: [storeId], references: [id])
	storeId			String

	categories Category[]

	@@index([storeId])
}

model Category { 
	id 				String  @id @default(uuid())
	name 			String
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	storeId 	String
	store			Store @relation("StoreToCategory", fields: [storeId], references: [id])

	billboardId String
	billboard 	Billboard @relation(fields: [billboardId], references: [id])

	products Product[] @relation("CategoryToProduct")

	@@index([storeId])
	@@index([billboardId])
}

model Size {
	id 				String  @id @default(uuid())
	name 			String
	value 		String
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	storeId 	String
	store 		Store @relation("StoreToSize",fields: [storeId], references: [id])

	products Product[]

	@@index([storeId])
}

model Product {
	id 					String  @id @default(uuid())
	name 				String
	price 			Decimal
	newprice 		Decimal? 
	isFeatured 	Boolean @default(false)
	onCarousel 	Boolean @default(false)
	onSale 			Boolean @default(false)
	isArchived 	Boolean @default(false)
	createdAt 	DateTime @default(now())
	updatedAt 	DateTime @updatedAt


	storeId 		String
	store Store @relation("StoreToProduct", fields: [storeId], references: [id])

	categoryId 	String
	category 	Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

	sizeId 			String @default("")
	size 				Size @relation(fields: [sizeId], references: [id])


	images 			Image[]
	orderItems OrderItem[]

	@@index([storeId])
	@@index([categoryId])
	@@index([sizeId])
}

model Image {
	id 					String  @id @default(uuid())
	url 				String
	createdAt 	DateTime @default(now())
	updatedAt 	DateTime @updatedAt
	
	productId 	String
	product 	Product @relation(fields: [productId], references: [id], onDelete: Cascade)

	@@index([productId])
}

model Order {
	id 					String  @id @default(uuid())
	phone 			String @default("")
	address 		String @default("")
	isPaid 			Boolean @default(false)
	createdAt 	DateTime @default(now())
	updatedAt 	DateTime @updatedAt


	orderItems OrderItem[]

	storeId 		String
	store 			Store @relation("StoreToOrder", fields: [storeId], references: [id])

	@@index([storeId])
}

model OrderItem {
	id 					String  @id @default(uuid())

	orderId 		String
	order 		Order @relation(fields: [orderId], references: [id])

	productId 	String
	product 	Product @relation(fields: [productId], references: [id])

	@@index([orderId])
	@@index([productId])
}